#!/bin/bash
set -u
#Version check
min_version="2.7.0"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

# Cloud Config checks
ok=yes
if [[ -n "$GENESIS_CLOUD_CONFIG" ]] ; then
  if ! want_feature proto; then
    cloud_config_needs vm_type    "$(lookup params.bosh_vm_type   large)"
    cloud_config_needs network    "$(lookup params.bosh_network   bosh)"
    cloud_config_needs disk_type  "$(lookup params.bosh_disk_pool bosh)"

    if check_cloud_config ; then
      describe "  cloud-config [#G{OK}]"
    else
      ok=no
    fi
  fi
fi

# Environment Parameter checks
if want_feature vsphere; then
  for e in ephemeral persistent; do
    t=$(typeof params.vsphere_${e}_datastores)
    if [[ $t != "list" ]]; then
      describe "  ${e} vsphere datastores is a #Y{$t}, not a list [#R{FAILED}]"
      ok=no
    else
      describe "  ${e} vsphere datastores checks out [#G{OK}]"
    fi
  done
fi

ip=$(lookup params.static_ip)
describe "  checking if our certificates match the director static ip ($ip)..."
check_cert() {
  cert=$1 ; shift
  if ! safe exists "${GENESIS_SECRETS_BASE}$cert"; then
    describe "    - ${GENESIS_SECRETS_BASE}$cert [#Y{MISSING}]"
    ok=no
  else
    if safe --quiet x509 validate "${GENESIS_SECRETS_BASE}$cert" "$@" >/dev/null 2>&1; then
      describe "    - ${GENESIS_SECRETS_BASE}$cert [#G{OK}]"
    else
      describe "    - ${GENESIS_SECRETS_BASE}$cert [#R{INVALID}]"
      safe x509 validate "${GENESIS_SECRETS_BASE}$cert" "$@" >&1 | sed -e 's/^/      /';
      ok=no
      echo
    fi
  fi
}
check_cert ssl/server          --for "$ip"
check_cert ssl/mbus            --for "$ip"
check_cert ssl/uaa             --for "$ip"
check_cert ssl/uaa-sp          --for "$ip"
check_cert credhub/server      --for "$ip"
check_cert nats/server         --for "$ip" --for default.nats.bosh-internal
check_cert nats/director       --for "$ip" --for default.director.bosh-internal
check_cert nats/health/monitor --for "$ip" --for default.hm.bosh-internal
check_cert blobstore/server    --for "$ip"

if [[ "$ok" = "yes" ]]; then
  describe "  environment files [#G{OK}]"
else
  describe "  environment files [#R{FAILED}]"
  exit 1
fi

